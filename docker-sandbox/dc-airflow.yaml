#
#
#
version: '3.9'
#
#x-airflow-common:
#  &airflow-common
#  image: ${AIRFLOW_IMAGE_NAME:-apache/airflow:2.4.3}
#  environment:
#    &airflow-common-env
#    AIRFLOW__CORE__EXECUTOR: CeleryExecutor
#    AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: mysql+mysqldb://airflow:airflow@mysqlserver:3306/airflow
#    AIRFLOW__CORE__SQL_ALCHEMY_CONN: mysql+mysqldb://airflow:airflow@mysqlserver:3306/airflow
#    AIRFLOW__CELERY__RESULT_BACKEND: db+mysql://airflow:airflow@mysqlserver:3306/airflow
#    AIRFLOW__CELERY__BROKER_URL: redis://:@redis:6379/0
#    AIRFLOW__CORE__FERNET_KEY: ''
#    AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'true'
#    AIRFLOW__CORE__LOAD_EXAMPLES: 'true'
#    AIRFLOW__API__AUTH_BACKENDS: 'airflow.api.auth.backend.basic_auth'
#    _PIP_ADDITIONAL_REQUIREMENTS: ${_PIP_ADDITIONAL_REQUIREMENTS:-}
#    AIRFLOW_UID: 50000
#  volumes:
#    - /apps/sandbox/airflow/dags:/opt/airflow/dags
#    - /apps/sandbox/airflow/logs:/opt/airflow/logs
#    - /apps/sandbox/airflow/plugins:/opt/airflow/plugins
#  user: "${AIRFLOW_UID:-50000}:50000"
#  depends_on:
#    &airflow-common-depends-on
#    redis-server:
#      condition: service_healthy
#

services:
#
#
#
  redis-server:
    image: redis:latest
    container_name: redis-server
    hostname: redis-server
    expose:
      - 6379
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 30s
      retries: 50
    restart: always

#
#
#
  airflow-webserver:
    image: apache/airflow:2.4.3
    container_name: airflow-webserver
    hostname: airflow-webserver
    env_file:
      - env_airflow.env
    volumes:
      - /apps/sandbox/airflow/dags:/opt/airflow/dags
      - /apps/sandbox/airflow/logs:/opt/airflow/logs
      - /apps/sandbox/airflow/plugins:/opt/airflow/plugins
    user: "0:0"
    command: webserver
    ports:
      - 8880:8080
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/health"]
      interval: 10s
      timeout: 10s
      retries: 5
    restart: always
    depends_on:
      redis-server:
        condition: service_healthy

#
#
#
  airflow-scheduler:
    image: apache/airflow:2.4.3
    container_name: airflow-scheduler
    hostname: airflow-scheduler
    env_file:
      - env_airflow.env
    volumes:
      - /apps/sandbox/airflow/dags:/opt/airflow/dags
      - /apps/sandbox/airflow/logs:/opt/airflow/logs
      - /apps/sandbox/airflow/plugins:/opt/airflow/plugins
    user: "0:0"
    command: scheduler
    healthcheck:
      test: ["CMD-SHELL", 'airflow jobs check --job-type SchedulerJob --hostname "$${HOSTNAME}"']
      interval: 10s
      timeout: 10s
      retries: 5
    restart: always
    depends_on:
      redis-server:
        condition: service_healthy

#
#
#
  airflow-worker:
    image: apache/airflow:2.4.3
    container_name: airflow-worker
    hostname: airflow-worker
    volumes:
      - /apps/sandbox/airflow/dags:/opt/airflow/dags
      - /apps/sandbox/airflow/logs:/opt/airflow/logs
      - /apps/sandbox/airflow/plugins:/opt/airflow/plugins
    user: "0:0"
    command: celery worker
    healthcheck:
      test:
        - "CMD-SHELL"
        - 'celery --app airflow.executors.celery_executor.app inspect ping -d "celery@$${HOSTNAME}"'
      interval: 10s
      timeout: 10s
      retries: 5
    env_file:
      - env_airflow.env
    environment:
      # Required to handle warm shutdown of the celery workers properly
      # See https://airflow.apache.org/docs/docker-stack/entrypoint.html#signal-propagation
      DUMB_INIT_SETSID: "0"
    restart: always
    depends_on:
      redis-server:
        condition: service_healthy

#
#
#
  airflow-triggerer:
    image: apache/airflow:2.4.3
    container_name: airflow-triggerer
    hostname: airflow-triggerer
    env_file:
      - env_airflow.env
    volumes:
      - /apps/sandbox/airflow/dags:/opt/airflow/dags
      - /apps/sandbox/airflow/logs:/opt/airflow/logs
      - /apps/sandbox/airflow/plugins:/opt/airflow/plugins
    user: "0:0"
    command: triggerer
    healthcheck:
      test: ["CMD-SHELL", 'airflow jobs check --job-type TriggererJob --hostname "$${HOSTNAME}"']
      interval: 10s
      timeout: 10s
      retries: 5
    restart: always
    depends_on:
      redis-server:
        condition: service_healthy

  airflow-init:
    image: apache/airflow:2.4.3
    container_name: airflow-init
    hostname: airflow-init
    user: "0:0"
    entrypoint: /bin/bash
    # yamllint disable rule:line-length
    command:
      - -c
      - |
        function ver() {
          printf "%04d%04d%04d%04d" $${1//./ }
        }
        airflow_version=$$(AIRFLOW__LOGGING__LOGGING_LEVEL=INFO && gosu airflow airflow version)
        airflow_version_comparable=$$(ver $${airflow_version})
        min_airflow_version=2.2.0
        min_airflow_version_comparable=$$(ver $${min_airflow_version})
        if (( airflow_version_comparable < min_airflow_version_comparable )); then
          echo
          echo -e "\033[1;31mERROR!!!: Too old Airflow version $${airflow_version}!\e[0m"
          echo "The minimum Airflow version supported: $${min_airflow_version}. Only use this or higher!"
          echo
          exit 1
        fi
        if [[ -z "${AIRFLOW_UID}" ]]; then
          echo
          echo -e "\033[1;33mWARNING!!!: AIRFLOW_UID not set!\e[0m"
          echo "If you are on Linux, you SHOULD follow the instructions below to set "
          echo "AIRFLOW_UID environment variable, otherwise files will be owned by root."
          echo "For other operating systems you can get rid of the warning with manually created .env file:"
          echo "    See: https://airflow.apache.org/docs/apache-airflow/stable/howto/docker-compose/index.html#setting-the-right-airflow-user"
          echo
        fi
        one_meg=1048576
        mem_available=$$(($$(getconf _PHYS_PAGES) * $$(getconf PAGE_SIZE) / one_meg))
        cpus_available=$$(grep -cE 'cpu[0-9]+' /proc/stat)
        disk_available=$$(df / | tail -1 | awk '{print $$4}')
        warning_resources="false"
        if (( mem_available < 4000 )) ; then
          echo
          echo -e "\033[1;33mWARNING!!!: Not enough memory available for Docker.\e[0m"
          echo "At least 4GB of memory required. You have $$(numfmt --to iec $$((mem_available * one_meg)))"
          echo
          warning_resources="true"
        fi
        if (( cpus_available < 2 )); then
          echo
          echo -e "\033[1;33mWARNING!!!: Not enough CPUS available for Docker.\e[0m"
          echo "At least 2 CPUs recommended. You have $${cpus_available}"
          echo
          warning_resources="true"
        fi
        if (( disk_available < one_meg * 10 )); then
          echo
          echo -e "\033[1;33mWARNING!!!: Not enough Disk space available for Docker.\e[0m"
          echo "At least 10 GBs recommended. You have $$(numfmt --to iec $$((disk_available * 1024 )))"
          echo
          warning_resources="true"
        fi
        if [[ $${warning_resources} == "true" ]]; then
          echo
          echo -e "\033[1;33mWARNING!!!: You have not enough resources to run Airflow (see above)!\e[0m"
          echo "Please follow the instructions to increase amount of resources available:"
          echo "   https://airflow.apache.org/docs/apache-airflow/stable/howto/docker-compose/index.html#before-you-begin"
          echo
        fi
        mkdir -p /sources/logs /sources/dags /sources/plugins
        chown -R "${AIRFLOW_UID}:0" /sources/{logs,dags,plugins}
        exec /entrypoint airflow version
    # yamllint enable rule:line-length
    env_file:
      - env_airflow.env
    environment:
      _AIRFLOW_DB_UPGRADE: 'true'
      _AIRFLOW_WWW_USER_CREATE: 'true'
      _AIRFLOW_WWW_USER_USERNAME: 'airflow'
      _AIRFLOW_WWW_USER_PASSWORD: 'airflow'
      _PIP_ADDITIONAL_REQUIREMENTS: ''
    volumes:
      - /apps/sandbox/airflow/sources:/sources
      - /apps/sandbox/airflow/dags:/opt/airflow/dags
      - /apps/sandbox/airflow/logs:/opt/airflow/logs
      - /apps/sandbox/airflow/plugins:/opt/airflow/plugins

  airflow-cli:
    image: apache/airflow:2.4.3
    container_name: airflow-cli
    hostname: airflow-cli
    volumes:
      - /apps/sandbox/airflow/dags:/opt/airflow/dags
      - /apps/sandbox/airflow/logs:/opt/airflow/logs
      - /apps/sandbox/airflow/plugins:/opt/airflow/plugins
    user: "0:0"
    profiles:
      - debug
    env_file:
      - env_airflow.env
    environment:
      CONNECTION_CHECK_MAX_COUNT: "0"
    # Workaround for entrypoint issue. See: https://github.com/apache/airflow/issues/16252
    command:
      - bash
      - -c
      - airflow

  # You can enable flower by adding "--profile flower" option e.g. docker-compose --profile flower up
  # or by explicitly targeted on the command line e.g. docker-compose up flower.
  # See: https://docs.docker.com/compose/profiles/
  flower:
    image: apache/airflow:2.4.3
    container_name: flower
    hostname: flower
    env_file:
      - env_airflow.env
    volumes:
      - /apps/sandbox/airflow/dags:/opt/airflow/dags
      - /apps/sandbox/airflow/logs:/opt/airflow/logs
      - /apps/sandbox/airflow/plugins:/opt/airflow/plugins
    user: "0:0"
    command: celery flower
    profiles:
      - flower
    ports:
      - 5555:5555
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:5555/"]
      interval: 10s
      timeout: 10s
      retries: 5
    restart: always
    depends_on:
      redis-server:
        condition: service_healthy

volumes:
  postgres-db-volume:

#
networks:
  default:
    external: true
    driver: bridge
    name: sandbox-bigdata.net