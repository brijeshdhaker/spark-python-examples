#
#
#
version: "3.9"

services:
  #
  # Zookeeper Server
  #
  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.0
    hostname: zookeeper
    container_name: zookeeper
    healthcheck:
      test: curl -f http://zookeeper.sandbox.net:8080/commands || exit 1
      retries: 20
      interval: 10s
    ports:
      - "2181:2181"
    volumes:
      - sandbox_apps_path:/apps
      - /apps/sandbox/zookeeper/hadoop311/secrets:/etc/zookeeper/secrets
      - /apps/sandbox/zookeeper/hadoop311/data:/var/lib/zookeeper/data
      - /apps/sandbox/zookeeper/hadoop311/log:/var/lib/zookeeper/log
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
      ALLOW_UNSIGNED: "true"

  #
  # Apache Kafka Server
  #
  kafka-broker:
    image: confluentinc/cp-server:7.1.2
    hostname: kafka-broker
    container_name: kafka-broker
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
      - "19092:19092"
    volumes:
      - sandbox_host_path:/apps/hostpath
      - sandbox_base_path:/apps/sandbox
      - sandbox_kafka_secrets:/etc/kafka/secrets
      - sandbox_kafka_data:/var/lib/kafka/data
    environment:
      KAFKA_BROKER_ID: 0
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_ADVERTISED_HOST_NAME: localhost
      KAFKA_LISTENERS: INTERNAL://kafka-broker:19092,EXTERNAL://0.0.0.0:9092
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka-broker:19092,EXTERNAL://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_METRIC_REPORTERS: io.confluent.metrics.reporter.ConfluentMetricsReporter
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_CONFLUENT_LICENSE_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_CONFLUENT_BALANCER_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_CONFLUENT_SCHEMA_REGISTRY_URL: http://schema-registry:8081
      CONFLUENT_METRICS_REPORTER_BOOTSTRAP_SERVERS: kafka-broker:19092
      CONFLUENT_METRICS_REPORTER_TOPIC_REPLICAS: 1
      CONFLUENT_METRICS_ENABLE: 'true'
      CONFLUENT_SUPPORT_CUSTOMER_ID: 'anonymous'

  #
  #
  #
  schema-registry:
    image: confluentinc/cp-schema-registry:7.1.2
    hostname: schema-registry
    container_name: schema-registry
    depends_on:
      - zookeeper
      - kafka-broker
    ports:
      - "8081:8081"
    volumes:
      - sandbox_host_path:/apps/hostpath
      - sandbox_base_path:/apps/sandbox
      - sandbox_schema_registry_secrets:/etc/schema-registry/secrets
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: 'kafka-broker:19092'
      SCHEMA_REGISTRY_LISTENERS: http://0.0.0.0:8081
      SCHEMA_REGISTRY_LOG4J_ROOT_LOGLEVEL: INFO

  #
  # Cassandra Server
  #
  cassandra:
    image: cassandra:4.0.2
    hostname: cassandra
    container_name: cassandra
    restart: always
    ports:
      - "7000:7000"
    volumes:
      - sandbox_host_path:/apps/hostpath
      - sandbox_base_path:/apps/sandbox
      - sandbox_cassandra_data:/var/lib/cassandra
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes

  #
  # HDFS Sandbox
  #

  # HDFS Sandbox
  namenode:
    image: brijeshdhaker/hadoop-namenode:3.1.1
    container_name: namenode
    hostname: namenode
    restart: no
    #    command:
    #      - /opt/hadoop-3.1.1/bin/hdfs namenode -upgrade
    ports:
      - "9870:9870"
      - "9000:9000"
    volumes:
      - sandbox_apps_path:/apps
      - sandbox_hadoop_311_dfs:/hadoop/dfs
    environment:
      - CLUSTER_NAME=docker-sandbox
    env_file:
      - envs/docker_hadoop311.env

  #
  datanode:
    image: brijeshdhaker/hadoop-datanode:3.1.1
    container_name: datanode
    hostname: datanode
    ports:
      - "9864:9864"
      - "9866:9866"
    restart: always
    volumes:
      - sandbox_apps_path:/apps
      - sandbox_hadoop_311_dfs:/hadoop/dfs
    environment:
      SERVICE_PRECONDITION: "namenode:9870"
    env_file:
      - envs/docker_hadoop311.env

  #
  # YARN Sandbox
  #
  # YARN Sandbox
  resourcemanager:
    image: brijeshdhaker/hadoop-resourcemanager:3.1.1
    container_name: resourcemanager
    hostname: resourcemanager
    restart: always
    ports:
      - "8088:8088"
      - "8032:8032"
    volumes:
      - sandbox_apps_path:/apps
    environment:
      SERVICE_PRECONDITION: "namenode:9000 namenode:9870 datanode:9864"
    env_file:
      - envs/docker_hadoop311.env

  #
  nodemanager:
    image: brijeshdhaker/hadoop-nodemanager:3.1.1
    container_name: nodemanager
    hostname: nodemanager
    restart: always
    ports:
      - "8042:8042"
    volumes:
      - sandbox_apps_path:/apps
    environment:
      SERVICE_PRECONDITION: "namenode:9000 namenode:9870 datanode:9864 resourcemanager:8088"
    env_file:
      - envs/docker_hadoop311.env

  #
  # YARN History Server
  #
  historyserver:
    image: brijeshdhaker/hadoop-historyserver:3.1.1
    container_name: historyserver
    hostname: historyserver
    restart: always
    ports:
      - "19888:19888"
    environment:
      SERVICE_PRECONDITION: "namenode:9000 namenode:9870 datanode:9864"
    volumes:
      - sandbox_apps_path:/apps
      - sandbox_hadoop_311_yarn:/yarn
    env_file:
      - envs/docker_hadoop311.env

  #
  # Mysql Database Server
  #
  mysqlserver:
    image: mysql/mysql-server:8.0.28
    container_name: mysqlserver
    hostname: mysqlserver.sandbox.net
    restart: always
    ports:
      - "3306:3306"
    command: "mysqld --character-set-server=utf8 --collation-server=utf8_unicode_ci"
    volumes:
      - sandbox_apps_path:/apps
      - sandbox_mysql_data:/var/lib/mysql
      - ./conf/mysql:/etc/mysql/conf.d
    env_file:
      - ./envs/docker_mysql.env
    healthcheck:
      test: "/usr/bin/mysql --user=root --password=p@SSW0rd --execute \"SHOW DATABASES;\""
      # test: [ "CMD", "mysqladmin" ,"ping", "-h", "localhost" ]
      timeout: 20s
      retries: 10

  #
  # Hive Metastore
  #
  metastore:
    image: brijeshdhaker/hive:3.1.3
    hostname: metastore.sandbox.net
    container_name: metastore
    healthcheck:
      test: netstat -lpn | grep 9083 || exit 1
      retries: 20
      interval: 10s
    env_file:
      - ./envs/docker_hive.env
    command: /opt/hive/bin/hive --service metastore
    environment:
      SERVICE_PRECONDITION: "mysqlserver.sandbox.net:3306"
    ports:
      - "9083:9083"
    volumes:
      - sandbox_apps_path:/apps
      - sandbox_hadoop_311:/opt/hadoop

  # Hive Server
  hiveserver:
    image: brijeshdhaker/hive:3.1.3
    container_name: hiveserver
    hostname: hiveserver.sandbox.net
    healthcheck:
      test: nc -vz hiveserver.sandbox.net 10002 || exit 1
      retries: 20
      interval: 10s
    depends_on:
      metastore:
        condition: service_healthy
    env_file:
      - ./envs/docker_hive.env
    environment:
      SERVICE_PRECONDITION: "namenode.sandbox.net:9000 metastore.sandbox.net:9083"
    ports:
      - "10000:10000"
      - "10002:10002"
    volumes:
      - sandbox_apps_path:/apps
      - sandbox_hadoop_311:/opt/hadoop

  # Spark History Server
  spark-historyserver:
    image: brijeshdhaker/spark-standalon:3.1.2
    container_name: sparkhistory
    hostname: sparkhistory.sandbox.net
    environment:
      SPARK_WORKLOAD: HistoryServer
      SERVICE_PRECONDITION: "namenode:9870 datanode:9864"
    depends_on:
      - namenode
      - datanode
    ports:
      - "18080:18080"
    env_file:
      - envs/docker_spark312.env
    volumes:
      - sandbox_apps_path:/apps
      - ./conf/spark/spark-defaults.conf:/opt/spark/conf/spark-defaults.conf

  # Zeppelin Notebook
  zeppelin:
    image: apache/zeppelin:0.10.1
    container_name: zeppelin
    hostname: zeppelin
    env_file:
      - envs/docker_zeppelin.env
    ports:
      - "9080:8080"
    volumes:
      - sandbox_apps_path:/apps
      - sandbox_hadoop_311:/opt/hadoop
      - sandbox_hbase_246:/opt/hbase
      #      - sandbox_hbase_117:/opt/hbase-client
      - sandbox_hive_313:/opt/hive
      - sandbox_spark_312:/opt/spark
      - sandbox_zeppelin_conf:/opt/zeppelin/conf
      - sandbox_zeppelin_notebook:/opt/notebook
  #      - sandbox_zeppelin_conf:/opt/zeppelin/conf
  #      - sandbox_m2:/opt/zeppelin/.m2
  #      - sandbox_ivy2:/opt/zeppelin/.ivy2

  #
  # Apache NiFi
  #
  nififlow:
    image: hortonworks/nifi:latest
    container_name: nififlow
    hostname: nififlow
    restart: always
    ports:
      - "19090:8080"
      - "19443:8443"
    volumes:
      - sandbox_host_path:/apps/hostpath
      - sandbox_base_path:/apps/sandbox
      - sandbox_nifi_conf:/opt/nifi/nifi-current/conf
      - sandbox_nifi_content_repository:/opt/nifi/nifi-current/content_repository
      - sandbox_nifi_database_repository:/opt/nifi/nifi-current/database_repository
      - sandbox_nifi_flowfile_repository:/opt/nifi/nifi-current/flowfile_repository
      - sandbox_nifi_provenance_repository:/opt/nifi/nifi-current/provenance_repository
      - sandbox_nifi_log:/opt/nifi/nifi-current/logs
      - sandbox_nifi_state:/opt/nifi/nifi-current/state

#
volumes:
  sandbox_host_path:
    external: true
  sandbox_base_path:
    external: true
  sandbox_m2:
    external: true
  sandbox_ivy2:
    external: true
  sandbox_zookeeper_secrets:
    external: true
  sandbox_zookeeper_data:
    external: true
  sandbox_zookeeper_log:
    external: true
  sandbox_kafka_secrets:
    external: true
  sandbox_kafka_data:
    external: true
  sandbox_kafka_log:
    external: true
  sandbox_schema_registry_secrets:
    external: true
  sandbox_cassandra_data:
    external: true
  sandbox_mysql_data:
    external: true
  sandbox_mysql_conf:
    external: true
  sandbox_hadoop_data:
    external: true
  sandbox_hadoop_dfs_name:
    external: true
  sandbox_hadoop_dfs_data:
    external: true
  sandbox_yarn_history:
    external: true
  sandbox_postgres_data:
    external: true
  sandbox_postgres_conf:
    external: true
  sandbox_postgres_init:
    external: true
  sandbox_zeppelin:
    external: true
  sandbox_zeppelin_conf:
    external: true
  sandbox_hadoop:
    external: true
  sandbox_hbase:
    external: true
  sandbox_hbase_client:
    external: true
  sandbox_hive:
    external: true
  sandbox_spark:
    external: true
  sandbox_nifi_conf:
    external: true
  sandbox_nifi_content_repository:
    external: true
  sandbox_nifi_database_repository:
    external: true
  sandbox_nifi_flowfile_repository:
    external: true
  sandbox_nifi_provenance_repository:
    external: true
  sandbox_nifi_log:
    external: true
  sandbox_nifi_state:
    external: true


#
networks:
  default:
    external: true
    driver: bridge
    name: sandbox.net